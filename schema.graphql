# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Channel {
  id: ID!

  """Whether this channel is a RPG channel."""
  isGame: Boolean!
  isPublic: Boolean!
  name: String!
  title: String!
  topic: String!
  description: String!
  created: Date!
  modified: Date!
  isArchived: Boolean!
  owner: User!
  ownerId: ID!
  messages(after: ID, limit: Int): [Message!]!
  invitations: [Invitation!]!
  members: [Members!]!
}

type ChannelEvent {
  newMessage: Message
  messageDeleted: ID
  messageEdited: Message
  messagePreview: PreviewMessage
  publishTime: Date!
  channelId: ID!
}

type Content {
  text: String!
  entities: [JSONObject!]!
  seed: Int!
}

"""Date custom scalar type"""
scalar Date

type Invitation {
  token: String!
  channel: Channel!
  channelId: ID!
  creator: User!
  creatorId: ID!
  expiration: Date!
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

type Media {
  id: ID!
  uploader: User
  uploaderId: ID
  filename: String!
  originalFilename: String
  mimeType: String!
  hash: String!
  size: Int!
  description: String!
  created: Date!
}

type Members {
  user: User!
  userId: ID!
  channel: Channel!
  channelId: ID!
  isAdmin: Boolean!
  joinDate: Date!
  isMuted: Boolean!
  character: String!
  isOnline: Boolean!
}

type Message {
  id: ID!
  sender: User
  senderId: ID
  channel: Channel!
  channelId: ID!

  """
  Name of character. The message is a Out-of-Character message only if this field empty
  """
  character: String!

  """Whether this message represents an action."""
  isAction: Boolean!

  """Empty massage mark the member has joined."""
  isJoin: Boolean!

  """Empty massage mark the member has left."""
  isLeave: Boolean!
  isGm: Boolean!
  isPinned: Boolean!
  isHidden: Boolean!

  """If the list is not empty, it represents this is a whisper message."""
  whisperTo: [ID!]!

  """
  Message plain text. If this message is not public, the string is always empty.
  """
  text: String!

  """
  Message rich text entities. If this message is not public, the list is always empty
  """
  entities: [JSONObject!]!
  media: Media
  mediaId: ID
  parent: ID
  parentId: ID
  crossOff: Boolean!

  """Random seed. If this message is not public, the seed is always 0."""
  seed: Int!
  created: Date!
  orderDate: Date!
  orderOffset: Int!
  modified: Date!
  editDate: Date
}

type Mutation {
  sendMessage(id: ID, whisperTo: [ID!] = [], hide: Boolean = false, character: String!, channelId: ID!, entities: [JSONObject!]!, text: String!): Message
  sendMessageSource(id: ID, whisperTo: [ID!] = [], hide: Boolean = false, isExpression: Boolean = true, character: String!, channelId: ID!, source: String!): Message! @deprecated(reason: "Don't use, just for development.")
  sendMessagePreview(
    isExpression: Boolean = false
    startTime: Date!

    """If blank, this is a Out-of-Character message."""
    character: String!
    channelId: ID!

    """If blank, just show typing."""
    source: String!
    id: ID!
  ): Boolean!
  editMessage(character: String, entities: [JSONObject!]!, text: String!, messageId: String!): Message!
  setMessageCrossOff(crossOff: Boolean = true, messageId: ID!): Message
  deleteMessage(messageId: ID!): Boolean!
  moveMessage(after: ID, before: ID, message: ID!): Boolean!
  register(nickname: String!, password: String!, username: String!): User!

  """Keep alive."""
  ping: Boolean!
  createChannel(description: String = "", isPublic: Boolean = true, isGame: Boolean = false, title: String!, name: String!): Channel!
  joinChannel(userId: ID, channelId: ID!): Members
  quitChannel(channelId: ID!): Boolean!
  deleteChannel(name: String!, channelId: ID!): Boolean!
  editChannel(description: String, isArchive: Boolean, isPublic: Boolean, isGame: Boolean, title: String, name: String, channelId: ID!): Channel!
}

type PreviewMessage {
  id: ID!
  isExpression: Boolean!
  userId: ID!
  channelId: ID!
  character: String!
  source: String!
  startTime: Date!
  updateTime: Date!
}

type Query {
  getMessageById(id: ID!): Message!
  actuallyContent(id: ID!): Content
  getUserById(id: ID!): User
  getUserByUsername(username: String!): User

  """Keep alive."""
  ping: Boolean!
  getMe: User!

  """Get all channels."""
  channels: [Channel!]!
  getChannelById(id: ID!): Channel
  getMediaInfo(id: ID!): Media
}

type Subscription {
  channelEvent(channelId: ID!): ChannelEvent!
}

type User {
  id: ID!
  username: String!
  nickname: String!
  created: Date!
  avatar: Media
  avatarMediaId: ID
  isOnline: Boolean!
}
