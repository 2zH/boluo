# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Channel {
  id: ID!

  """Whether this channel is a RPG channel."""
  isGame: Boolean!
  isPublic: Boolean!
  isDeleted: Boolean!
  title: String!
  topic: String!
  description: String!
  created: DateTime!
  modified: DateTime!
  isArchived: Boolean!
  creator: User!
  creatorId: ID!
  messages: [Message!]!
  invitations: [Invitation!]!
  members: [Members!]!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type Invitation {
  token: String!
  channel: Channel!
  channelId: ID!
  creator: User!
  creatorId: ID!
  expiration: DateTime!
}

type Members {
  id: ID!
  user: User!
  userId: String!
  channel: Channel!
  channelId: String!
  isAdmin: Boolean!
  joinDate: DateTime!
  isMuted: Boolean!
  character: String!
  isOnline: Boolean!
}

type Message {
  id: ID!
  user: User!
  userId: ID!
  channel: Channel!
  channelId: ID

  """
  Name of character. The message is a Out-of-Character message only if this field empty
  """
  character: String!
  isAction: Boolean!

  """Message plain text source."""
  source: String!
  threadRoot: ID
  seed: Int!
  created: DateTime!
  modified: DateTime!
}

type Mutation {
  sendMessage(isRoll: Boolean = false, character: String!, channelId: ID!, source: String!, id: ID!): Message!
  sendMessagePreview(
    isRoll: Boolean = false
    startTime: DateTime!

    """If blank, this is a Out-of-Character message."""
    character: String!
    channelId: ID!

    """If blank, just show "sb. is typing..."."""
    source: String!
    id: ID!
  ): Boolean!
  editMessage(source: String!, messageId: String!): Message!
  deleteMessage(messageId: ID!): Boolean!
  register(nickname: String!, password: String!, username: String!): User!
  createChannel(title: String!): Channel!
}

type PreviewMessage {
  id: ID!
  isRoll: Boolean!
  userId: ID!
  channelId: ID!
  character: String!
  source: String!
  startTime: DateTime!
  updateTime: DateTime!
}

type Query {
  """Get all messages."""
  messages: [Message!]!
  getMessageById(id: ID!): Message!
  getUserById(id: ID!): User
  getUserByUsername(username: String!): User

  """Keep alive."""
  ping: Boolean!
  getMe: User!

  """Get all channels."""
  channels: [Channel!]!
  getChannelById(id: ID!): Channel
}

type Subscription {
  newMessage: Message!
  messagePreview: PreviewMessage!
  messageDeleted: ID!
  messageEdited: Message!
}

type User {
  id: ID!
  username: String!
  nickname: String!
  avatar: String!
  created: DateTime!
  isOnline: Boolean!
}
