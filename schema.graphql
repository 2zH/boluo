# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Channel {
  id: ID!
  title: String!
  topic: String
  created: DateTime!
  modified: DateTime!
  creator: User
  creatorId: ID
  messages: [Message!]!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

"""A type tag of entities."""
enum EntityType {
  ROLL
  LINK
}

type Message {
  id: ID!
  type: MessageType!
  user: User
  userId: ID
  channel: Channel
  channelId: ID
  charName: String!
  isAction: Boolean!

  """Message plain text."""
  content: String!
  entities: [MessageEntity!]!
  previous: ID
  threadHead: ID
  created: DateTime!
  modified: DateTime!
}

"""Text block, range is [start, start+offset)."""
type MessageEntity {
  type: EntityType!
  start: Int!
  offset: Int!

  """Appears only when the type is link"""
  link: String
}

"""A type tag of messages."""
enum MessageType {
  SYSTEM
  SAY
  ROLL
  OOC
}

type Mutation {
  sendMessage(type: MessageType!, charName: String!, channelId: ID!, content: String!, id: ID!): Message!
  updatePreviewMessage(type: MessageType!, charName: String!, channelId: ID!, content: String!, id: ID!): PreviewMessage!
  editMessage(content: String!, messageId: String!): Message!
  deleteMessage(messageId: String!): Boolean!
  register(nickname: String!, password: String!, email: String!): User!
  createChannel(title: String!): Channel!
  renameChannel(title: String!, id: ID!): Channel!
}

type PreviewMessage {
  id: ID!
  type: MessageType!
  userId: ID!
  channelId: ID!
  charName: String!

  """Message plain text."""
  content: String!
}

type Query {
  """Get all messages."""
  messages: [Message!]!
  getMessageById(id: ID!): Message!

  """Get all users."""
  users: [User!]!
  getUserById(id: ID!): User
  getUserByEmail(email: String!): User
  getMe: User!

  """Get all channels."""
  channels: [Channel!]!
  getChannelById(id: ID!): Channel
}

type Subscription {
  newMessage: Message!
  messagePreview: PreviewMessage!
}

type User {
  id: ID!
  email: String!
  nickname: String!
  created: DateTime!
}
